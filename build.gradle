/*
 * This code is part of Freenet. It is distributed under the GNU General
 * Public License, version 2 (or at your option any later version). See
 * http://www.gnu.org/ for further details of the GPL.
 */
import java.security.MessageDigest

buildscript {
    dependencies {
        apply from: 'dependencies.gradle'
        classpath scriptDependencies.witness
    }
}

plugins {
    id "java"
    id "maven-publish"

    id "com.github.spotbugs"     version "1.7.1"
    id "org.sonarqube"           version "2.7"
    id "com.adarshr.test-logger" version "1.6.0"
    id "org.ajoberstar.grgit"    version "3.1.1"
}

repositories {
    jcenter()
    maven { url 'https://mvn.freenetproject.org' }
}

dependencies {
    moduleDependencies.each {
        add(it.config, it.dep, it.options)
    }
}

sourceSets {
    main.java.srcDirs = ['src']
    test.java.srcDirs = ['test']
}

// Configuration
apply from: "$rootDir/gradle/analysis.gradle"

// output: build01484-13-g5831bbf
String gitrev = grgit.open(dir: project.rootDir).describe()
// output: 11.0.3 amd64 (Oracle Corporation)
String buildenv = "${System.properties['java.version']} ${System.properties['os.arch']} (${System.properties['java.vendor']})"
// true for windows platform
boolean isWindows = org.gradle.internal.os.OperatingSystem.current().isWindows()

tasks.withType(JavaCompile) {
    //options.compilerArgs += ['-Xlint:unchecked']
    sourceCompatibility = JavaVersion.toVersion(project.findProperty('targetJavaVersion')?:8)
    targetCompatibility = sourceCompatibility
    options.encoding = 'UTF-8'

    // work around for testing with jdk13
    // fork compile jobs to another compiler than the one its running with
    if (project.hasProperty('javaHome'))
        options.with {
            fork = true
            forkOptions.javaHome = file(project.findProperty('javaHome')?:null)
            forkOptions.executable = "$forkOptions.javaHome/bin/javac"
        }
}
tasks.withType(Javadoc) {
    // turn off overly pedantic lint checking
    options.addStringOption('Xdoclint:none', '-quiet')
    options.encoding = 'UTF-8'
}
tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps false
    reproducibleFileOrder  true
}

// Tasks

tasks.register('compileVersion', JavaCompile) {
    copy {
        from sourceSets.main.java.srcDirs
        into temporaryDir
        include 'freenet/node/Version.java'
        filter {
            String line -> line.replaceAll("@custom@","${gitrev}")
        }
    }
    source = fileTree(dir: temporaryDir, include: '**/*.java')
    classpath = files(sourceSets.main.output.classesDirs)
    destinationDir = sourceSets.main.output.classesDirs[0]
}

processResources {
    from(sourceSets.main.java.srcDirs) {
        include([
            'freenet/l10n/*properties',
            'freenet/l10n/iso-*.tab',
            'freenet/clients/http/staticfiles/**',
        ])
    }
    from(projectDir) {
        include 'dependencies.properties'
    }
}
processTestResources {
    from(sourceSets.test.java.srcDirs) {
        include([
            'freenet/client/filter/*/**',
            'freenet/crypt/ciphers/rijndael-gladman-test-data/**',
            'freenet/l10n/*properties',
        ])
    }
}

tasks.register('copyRuntimeLibs', Copy) {
    dependsOn 'jar'
    into "${buildDir}/output"
    from configurations.runtimeClasspath
    from jar
}

tasks.register('tar', Tar) {
    compression = Compression.BZIP2
    String archiveName = 'freenet-sources.tar.bz2'
    archiveFileName = archiveName
    destinationDirectory = buildDir

    from(projectDir) {
        exclude([
            'build',
            '.git',
            '.gradle',
        ])
    }
    doLast {
        ant.checksum(file:"$buildDir/$archiveName",
                     algorithm:'sha-256',
                     fileext:'.sha256')
    }
}

jar {
    dependsOn 'compileVersion'
    archivesBaseName = 'freenet'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes([
          "Permissions": "all-permissions",
          "Application-Name": "Freenet REference Daemon",
          "Required-Ext-Version": 29,
          "Recommended-Ext-Version": 29,
          "Compiled-With": "${buildenv}",
        ])
        attributes([
          "Specification-Title": "Freenet",
          "Specification-Version": "0.7.5",
          "Specification-Vendor": "freenetproject.org",
          "Implementation-Title": "Freenet",
          "Implementation-Version": "0.7.5 ${gitrev}",
          "Implementation-Vendor": "freenetproject.org",
        ], "common")
    }

    doLast {
        File file = file("${buildDir}/libs/freenet.jar")
        MessageDigest md = MessageDigest.getInstance("SHA-256")
        file.eachByte 4096, {bytes, len -> md.update(bytes, 0, len)}
        println "SHA-256 of ${file.name}: ${md.digest().encodeHex().toString()}"
    }
}

test {
    useJUnitPlatform()
    ignoreFailures = true

    reports {
        html.enabled true
        html.destination = file("${buildDir}/reports/junit")
    }

    testlogger {
        theme 'standard-parallel'
        slowThreshold 10000
        showFailedStandardStreams true
    }

    if ((findProperty('parallelTests')?:'false') == 'true')
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1

    workingDir sourceSets.test.output.resourcesDir
    include 'freenet/**/*Test.class'
    exclude 'freenet/**/*$*Test.class'

    // adds ability to exlude tests from command line options
    // ex: gradle test -PexcludeTests="freenet.client.async.SplitFileFetcherStorageTest,test2,etc"
    project.properties['excludeTests']?.replaceAll('\\.', '\\/')?.split('[,;]').each {
        exclude "${it}.class"
    }

    // TODO: these tests hang on windows
    if (isWindows)
        exclude(['freenet/store/RAMSaltMigrationTest*',
                 'freenet/store/caching/CachingFreenetStoreTest*'])

    systemProperties += [
        "test.l10npath_test": "freenet/l10n/",
        "test.l10npath_main": "../main/freenet/l10n/",
    ]
}

// Release Publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'org.freenetproject'
            artifactId "fred"
            version gitrev
            from components.java
        }
    }
    repositories {
        maven {
            url "s3://mvn.freenetproject.org/"
            credentials(AwsCredentials) {
                accessKey System.getenv('AWS_ACCESS_KEY_ID')
                secretKey System.getenv('AWS_SECRET_ACCESS_KEY')
            }
        }
    }
}

// Create the verification array with: gradle -q calculateChecksums
apply plugin: 'witness'
dependencyVerification {
    verify = [
      'org.bouncycastle:bcprov-jdk15on:1.59:bcprov-jdk15on-1.59.jar:1c31e44e331d25e46d293b3e8ee2d07028a67db011e74cb2443285aed1d59c85',
      'net.java.dev.jna:jna-platform:4.2.2:jna-platform-4.2.2.jar:32aca873a4cb14721d939bbc8287a828919c05e8e1040b3fe8290f6128cdecca',
      'net.java.dev.jna:jna:4.2.2:jna-4.2.2.jar:1f38af54e06c6e6f6dbf39ba2c052b952dea5dddb4871127b34639ddeb11bdbe',
      'org.freenetproject:freenet-ext:29:freenet-ext-29.jar:32f2b3d6beedf54137ea2f9a3ebef67666d769f0966b08cd17fd7db59ba4d79f',
      'junit:junit:4.12:junit-4.12.jar:59721f0805e223d84b90677887d9ff567dc534d7c502ca903c0c2b17f05c116a',
      'org.mockito:mockito-core:1.9.5:mockito-core-1.9.5.jar:f97483ba0944b9fa133aa29638764ddbeadb51ec3dbc02074c58fa2caecd07fa',
      'org.hamcrest:hamcrest-library:1.3:hamcrest-library-1.3.jar:711d64522f9ec410983bd310934296da134be4254a125080a0416ec178dfad1c',
      'org.hamcrest:hamcrest-core:1.3:hamcrest-core-1.3.jar:66fdef91e9739348df7a096aa384a5685f4e875584cce89386a7a47251c4d8e9',
      'org.objenesis:objenesis:1.0:objenesis-1.0.jar:c5694b55d92527479382f254199b3c6b1d8780f652ad61e9ca59919887f491a8',
    ]
}
